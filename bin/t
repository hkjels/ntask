#!/usr/bin/env node

/**
 * Module dependencies
 */

var ntask = require('../')
  , colors = require('colors')
  , program = require('commander')
  , tty = require('tty')

/**
 * Options   t --help
 */

program
  .version(ntask.version, '-v, --version')
  .option('-f, --format [string]', 'Custom format', '%K %T')
  .option('-r, --reverse', 'Reverse sort-order')
  .option('-l, --limit <n>', 'Limit the results outputted', parseInt)
  .option('-s, --stats', 'Supresses normal output. Outputs statistics instead\n')

  .option('-C, --no-color', 'Prevent colored output')
  .option('-G, --no-group', 'Prevent grouping by filename')
  .option('-H, --no-filename', 'Supress output of filenames\n')

  .option('-q, --quiet', 'Will run without output')

/**
 * Colortheme
 */

var theme = {
  'assignee': 'cyan'
  ,'body': 'white'
  ,'filename': 'grey'
  ,'hash': 'grey'
  ,'id': 'magenta'
  ,'line': 'cyan'
  ,'lb': 'red'
  ,'ld': 'green'
  ,'lf': 'yellow'
  ,'lo': 'cyan'
  ,'lr': 'magenta'
  ,'lt': 'green'
  ,'lx': 'blue'
  ,'title': 'white'
}
colors.setTheme(theme)

/**
 * Color task-keyword
 *
 * @param {String} keyword
 * @return {String}
 */

function colorKeyword (keyword) {
  switch (keyword) {
    case 'BUG': return keyword.lb
    case 'DONE': return 'âˆš'.ld
    case 'FIXME': return keyword.lf
    case 'OPTIMIZE': return keyword.lo
    case 'REVIEW': return keyword.lr
    case 'TODO': return keyword.lt
    case 'XXX': return keyword.lx
  }
}

/**
 * Initialize a new project
 */

program
  .command('init [path]')
  .action(function (path) {
    if (ntask.Project.init(path)) console.log('\n    Initialized project'.green+'\n')
    else console.error('\n    Project already exists'.red+'\n')
  })


/**
 * Update project-taskpool
 */

program
  .command('update [path]')
  .action(function (path) {
    path = [path] || [PWD]
    ntask.Taskpool.update(path, function (err, updates) {
      if (err) return console.error('\n   '+err.message+'\n')
      var message = 'Taskpool is up to date'
      console.log('')
      if (updates.added.length) console.log('   '+updates.added.length+' task(s) was added')
      if (updates.modified.length) console.log('   '+updates.modified.length+' task(s) was modified')
      if (updates.removed.length) console.log('   '+updates.removed.length+' task(s) was removed')
      if (updates.flawed.length) console.log('   '+updates.flawed.length+' task(s) was flawed')

      console.log('\n   '+new Array(message.length+1).join('-'))
      console.log('   '+message)
      console.log('   '+new Array(message.length+1).join('-')+'\n')
    })
  })

/**
 * Find any given task
 */

program
  .command('find <query>')
  .action(function (query) {
    // Used for grouping tasks by file
    var file = null

    ntask.Taskpool.find(query, function (err, tasks) {
      if (err) return console.error('\n   '+err.message+'\n')
      if (!tasks.length && program.group) return console.log('\n   No tasks matched query\n')

      // Display statistics about pool
      if (program.stats) return console.log(tasks.length)

      // Reverse pool
      if (program.reverse) tasks = tasks.reverse()

      // Loop through all the tasks in the pool
      for (var i = 0, c = tasks.length; i < c; i++) {
        var task = tasks[i]
            msg = ''

        // Limit the number of tasks to output
        if (program.limit > 0 && i == program.limit) return false

        if (program.filename) {
          if (program.group && file != task.file) {
            msg += '\n'+task.file.toString().filename+'\n'
          }
          else if (!program.group) msg += (PWD+'/'+task.file).toString().filename+':'
        }

        msg+= (function (task, format) {
          var params = ['assignee','body','id','keyword','hash','line','title']

          params.forEach(function (param) {
            var key = '%'+param[0].toUpperCase()
            if (format.indexOf(key) != -1) {
              if (param == 'keyword') format = format.replace(key, colorKeyword(task[param]))
              else if (param == 'hash') format = format.replace(key, task.labels.join(',')[param])
              else format = format.replace(key, task[param][param])
            }
          })

          return format.replace(/\\n/g, '\n')
        })(task, program.format)

        // Ouput message
        console.log(msg)
        file = task.file
      }
      if (program.group) console.log('')
    })
  })

/**
 * Web interface
 */

program
  .command('gui [path] [port]')
  .action(function (path, port) {
    var path = path || PWD
      , port = port || 3000
    ntask.gui(path, port)
  })


// Parse arguments

program
  .parse(process.argv)


// Prevent output
// TODO Research if there's a less obtrusive way of preventing output

if (program.quiet) console.log = console.error = function () {}


// Prevent styled output

if (!program.color || !tty.isatty(process.stdout.td)) {
  for (var attr in theme) {
    String.prototype.__defineGetter__(attr, function () { return this })
  }
}
