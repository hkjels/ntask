#!/usr/bin/env node

/**
 * Module dependencies
 */

var todo = require('../')
  , colors = require('colors')
  , program = require('commander')
  , file = null

// Options

program
  .version(todo.version, '-v, --version')
  .option('-l, --limit <n>', 'Limit the results output', parseInt)
  .option('-r, --reverse', 'Oldest first')
  .option('-C, --no-color', 'Prevent colored output')
  .option('-G, --no-group', 'Prevent grouping by filename')
  .option('-q, --quiet', 'Will run without output')

// Initialize a new project

program
  .command('init [path]')
  .action(function (fpath) {
    if (todo.Project.init(fpath)) console.log('Initialized project')
    else console.error('Project already exists')
  })

// Update project

program
  .command('update [path]')
  .action(function (path) {
    path = [path] || [PWD]
    todo.Taskpool.update(path, function (err, updates) {
      if (err) return console.error('\n   '+err.message+'\n')
      var message = 'Taskpool is up to date'
      console.log('')
      if (updates.added.length) console.log('   '+updates.added.length+' task(s) was added')
      if (updates.modified.length) console.log('   '+updates.modified.length+' task(s) was modified')
      if (updates.removed.length) console.log('   '+updates.removed.length+' task(s) was removed')

      console.log('\n   '+new Array(message.length+1).join('-'))
      console.log('   '+message)
      console.log('   '+new Array(message.length+1).join('-')+'\n')
    })
  })

// Perform a search
// TODO Use find-command by default

program
  .command('find <query>')
  .action(function (query) {
    todo.Taskpool.find(query, function (err, tasks) {
      if (err) return console.error('\n   '+err.message+'\n')
      if (!tasks.length && program.group) return console.log('\n   No tasks matched query\n')
      if (program.reverse) tasks = tasks.reverse()
      var i = 0
      tasks.forEach(function (task) {
        if (program.limit > 0 && i == program.limit) return false
        var msg = ''
        if (program.group && file != task.file) {
          msg += '\n'+task.file.toString().cyan+'\n'
        }
        else if (!program.group) msg += PWD+'/'+task.file.toString().cyan+':'
        msg += task.line.toString().yellow+':'+task.title
        console.log(msg)
        file = task.file
        i++
      })
      if (program.group) console.log('')
    })
  })

// Web interface

program
  .command('gui [path] [port]')
  .action(function (path, port) {
    var path = path || PWD
      , port = port || 3000
    todo.gui(path, port)
  })

// Parse arguments

program
  .parse(process.argv)

// Prevent output

if (program.quiet) console.log = console.error = function () {}

// Prevent colored output

if (!program.color) {
  String.prototype.__defineGetter__('yellow', function () { return this })
  String.prototype.__defineGetter__('cyan', function () { return this })
}
